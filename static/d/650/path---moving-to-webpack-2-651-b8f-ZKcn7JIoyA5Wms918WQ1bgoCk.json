{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"9055ddac-e8bd-581d-95ec-88d6449caa36","html":"<p><br>\n<a href=\"https://webpack.js.org\">Webpack2</a>很快就要发布了，目前已经到了2.1.0-beta.25了，我也是从2.1.0-beta21开始关注webpack2，类似tree-shaking等等新特性还是比较令人激动的，现在整理一下从webpack1升级到webpack2的过程。  </p>\n<p>你也可以查阅<a href=\"https://webpack.js.org/how-to/upgrade-from-webpack-1/\">官方的从webpack1至webpack2的文档</a></p>\n<h2>安装webpack2</h2>\n<p>首先要做的就是安装最新版的webpack，因为目前还不是稳定版，所以安装的时候最好指定确切的版本。目前最新的是2.1.—beta.25:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev webpack@2.1.0-beta.25</code></pre>\n      </div>\n<p>如果你使用任何其他webpack插件，你应该意识到它们同时也需要更新，例如：<a href=\"extract-text-webpack-plugin\">extract-text-webpack-plugin</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4</code></pre>\n      </div>\n<h5>module.loaders => module.rules</h5>\n<p>这并不是一个破坏性的更新，module.loaders 将继续支持，但在未来它将被module.rules 替换。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// before\nmodules: {\n loaders: {...}\n}\n\n// after\nmodules: {\n rules: {...}\n}</code></pre>\n      </div>\n<h5>resolve.modulesDirectories => resolve.modules</h5>\n<p>另一个重命名的属性，<code class=\"language-text\">resolve.modulesDirectories</code> 被重命名为 <code class=\"language-text\">resolve.modules</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// before\nresolve: {\n  modulesDirectories: [...],\n}\n\n// after\nresolve: {\n  modules: [...],\n}</code></pre>\n      </div>\n<h5>No webpack.optimize.OccurenceOrderPlugin</h5>\n<p>webpack.optimize.OccurenceOrderPlugin 将被默认包含在webpack2当中，所以我们没有必要单独为其配置。</p>\n<h5>Configuring loaders</h5>\n<p>在日常工作中我们使用postcss和<a href=\"https://github.com/postcss/postcss-loader\">postcss-loader</a>通过Webpack装载CSS。postcss 作为顶级属性在webpack当中配置。在webpack2中，这样是不被允许的；我们可以选择为loader配置一个options属性。任何插件，寻找顶级的配置将要被改变为这种风格。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// before, in Webpack top level\npostcss: {\n  plugins: ...\n}\n\n// after\nmodule: {\n  rules: [{\n    test: /\\.scss$/,\n    use: [\n      {\n        loader: &#39;postcss-loader&#39;,\n        options: {\n          plugins: ...\n        }\n      },\n      &#39;sass-loader&#39;\n    ]\n  }]\n}</code></pre>\n      </div>\n<h5>ExtractTextPlugin changes</h5>\n<p>上述对loader配置的变化也使得更容易配置多个loader，以前可以只能通过字符串拼接的形式，现在改为了一个数组，如ExtractTextPlugin：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// Webpack 1\nExtractTextPlugin.extract(\n  &#39;style-loader&#39;,\n  &#39;css-loader!postcss-loader!sass-loader&#39;\n);</code></pre>\n      </div>\n<p>这样很难工作，如果你不得不配置选项：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// Webpack 1\nExtractTextPlugin.extract(\n  &#39;style-loader&#39;,\n  &#39;css-loader?modules-true!postcss-loader!sass-loader&#39;\n);</code></pre>\n      </div>\n<p>webpack2 使用Array结合Object来配置loaders，这样就胡i方便很多，我们可以很容易的将上面的配置替换掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// Webpack 2\nvar loaders = [\n  {\n    loader: &#39;css-loader&#39;,\n    options: {\n      modules: true\n    }\n  },\n  {\n    loader: &#39;postcss-loader&#39;\n  },\n  {\n    loader: &#39;sass-loader&#39;\n  }\n]</code></pre>\n      </div>\n<p>webpack1 我们使用  key query 配置loaders，现在extracttextplugin 可以使用Array配置，而不是只允许字符串形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// Webpack 2\nExtractTextPlugin.extract({\n  fallbackLoader: &#39;style-loader&#39;,\n  loader: loaders,\n})</code></pre>\n      </div>\n<h5>Stop Babel from compiling ES2015 modules</h5>\n<p>webpack1 无法解析 es2015 module，所以babel将其转换成CommonJs。webpack2可以解析 es2015 module，并能够消除死代码的基础上使用module，所以建议你告诉Babel不将其转换成CommonJS模块。你可以通过改变babelrc配置实现：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// before\n&quot;presets&quot;: [&quot;es2015&quot;]\n\n// after\n&quot;presets&quot;: [\n  [&quot;es2015&quot;, { &quot;modules&quot;: false }]\n]</code></pre>\n      </div>\n<p>此文为本人根据<a href=\"http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/\">http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/</a>翻译而来</p>","frontmatter":{"title":"迁移至webpack2","date":"November 04, 2016"}}},"pageContext":{"slug":"/moving-to-webpack2/","previous":{"fields":{"slug":"/object-oriented-javascript-2/"},"frontmatter":{"title":"javascript 面向对象编程（继承）"}},"next":null}}