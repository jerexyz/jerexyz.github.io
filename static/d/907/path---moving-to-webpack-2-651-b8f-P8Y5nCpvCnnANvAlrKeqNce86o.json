{"data":{"site":{"siteMetadata":{"title":"Jere`s Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"9699f946-64ca-5411-ab6a-96fe86ea4684","excerpt":"Webpack2 很快就要发布了，目前已经到了 2.1.0-beta.25 了，我也是从 2.1.0-beta21 开始关注 webpack2，类似 tree-shaking 等等新特性还是比较令人激动的，现在整理一下从 webpack1 升级到 webpack…","html":"<p><a href=\"https://webpack.js.org\">Webpack2</a>很快就要发布了，目前已经到了 2.1.0-beta.25 了，我也是从 2.1.0-beta21 开始关注 webpack2，类似 tree-shaking 等等新特性还是比较令人激动的，现在整理一下从 webpack1 升级到 webpack2 的过程。</p>\n<p>你也可以查阅<a href=\"https://webpack.js.org/how-to/upgrade-from-webpack-1/\">官方的从 webpack1 至 webpack2 的文档</a></p>\n<h2>安装 webpack2</h2>\n<p>首先要做的就是安装最新版的 webpack，因为目前还不是稳定版，所以安装的时候最好指定确切的版本。目前最新的是 2.1.—beta.25:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev webpack@2.1.0-beta.25</code></pre></div>\n<p>如果你使用任何其他 webpack 插件，你应该意识到它们同时也需要更新，例如：<a href=\"extract-text-webpack-plugin\">extract-text-webpack-plugin</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4</code></pre></div>\n<h5>module.loaders => module.rules</h5>\n<p>这并不是一个破坏性的更新，module.loaders 将继续支持，但在未来它将被 module.rules 替换。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// before\nmodules: {\n loaders: {...}\n}\n\n// after\nmodules: {\n rules: {...}\n}</code></pre></div>\n<h5>resolve.modulesDirectories => resolve.modules</h5>\n<p>另一个重命名的属性，<code class=\"language-text\">resolve.modulesDirectories</code> 被重命名为 <code class=\"language-text\">resolve.modules</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// before\nresolve: {\n  modulesDirectories: [...],\n}\n\n// after\nresolve: {\n  modules: [...],\n}</code></pre></div>\n<h5>No webpack.optimize.OccurenceOrderPlugin</h5>\n<p>webpack.optimize.OccurenceOrderPlugin 将被默认包含在 webpack2 当中，所以我们没有必要单独为其配置。</p>\n<h5>Configuring loaders</h5>\n<p>在日常工作中我们使用 postcss 和<a href=\"https://github.com/postcss/postcss-loader\">postcss-loader</a>通过 Webpack 装载 CSS。postcss 作为顶级属性在 webpack 当中配置。在 webpack2 中，这样是不被允许的；我们可以选择为 loader 配置一个 options 属性。任何插件，寻找顶级的配置将要被改变为这种风格。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// before, in Webpack top level\npostcss: {\n  plugins: ...\n}\n\n// after\nmodule: {\n  rules: [{\n    test: /\\.scss$/,\n    use: [\n      {\n        loader: &#39;postcss-loader&#39;,\n        options: {\n          plugins: ...\n        }\n      },\n      &#39;sass-loader&#39;\n    ]\n  }]\n}</code></pre></div>\n<h5>ExtractTextPlugin changes</h5>\n<p>上述对 loader 配置的变化也使得更容易配置多个 loader，以前可以只能通过字符串拼接的形式，现在改为了一个数组，如 ExtractTextPlugin：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Webpack 1\nExtractTextPlugin.extract(\n  &#39;style-loader&#39;,\n  &#39;css-loader!postcss-loader!sass-loader&#39;\n);</code></pre></div>\n<p>这样很难工作，如果你不得不配置选项：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Webpack 1\nExtractTextPlugin.extract(\n  &#39;style-loader&#39;,\n  &#39;css-loader?modules-true!postcss-loader!sass-loader&#39;\n);</code></pre></div>\n<p>webpack2 使用 Array 结合 Object 来配置 loaders，这样就胡 i 方便很多，我们可以很容易的将上面的配置替换掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Webpack 2\nvar loaders = [\n  {\n    loader: &#39;css-loader&#39;,\n    options: {\n      modules: true\n    }\n  },\n  {\n    loader: &#39;postcss-loader&#39;\n  },\n  {\n    loader: &#39;sass-loader&#39;\n  }\n]</code></pre></div>\n<p>webpack1 我们使用 key query 配置 loaders，现在 extracttextplugin 可以使用 Array 配置，而不是只允许字符串形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Webpack 2\nExtractTextPlugin.extract({\n  fallbackLoader: &#39;style-loader&#39;,\n  loader: loaders,\n})</code></pre></div>\n<h5>Stop Babel from compiling ES2015 modules</h5>\n<p>webpack1 无法解析 es2015 module，所以 babel 将其转换成 CommonJs。webpack2 可以解析 es2015 module，并能够消除死代码的基础上使用 module，所以建议你告诉 Babel 不将其转换成 CommonJS 模块。你可以通过改变 babelrc 配置实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// before\n&quot;presets&quot;: [&quot;es2015&quot;]\n\n// after\n&quot;presets&quot;: [\n  [&quot;es2015&quot;, { &quot;modules&quot;: false }]\n]</code></pre></div>\n<p>此文为本人根据<a href=\"http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/\">http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/</a>翻译而来</p>","frontmatter":{"title":"迁移至webpack2","date":"November 04, 2016"}}},"pageContext":{"slug":"/moving-to-webpack2/","previous":{"fields":{"slug":"/avascript-array-evaluation/"},"frontmatter":{"title":"javascript array 求和，求平均值"}},"next":{"fields":{"slug":"/nginx-spa-app-config/"},"frontmatter":{"title":"nginx部署前端SPA应用实践"}}}}