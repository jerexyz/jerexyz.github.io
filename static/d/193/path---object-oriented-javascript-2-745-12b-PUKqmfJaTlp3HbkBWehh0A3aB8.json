{"data":{"site":{"siteMetadata":{"title":"Blog","author":"jerexyz"}},"markdownRemark":{"id":"8f8293ea-0aeb-53a4-9509-d5a9686e7944","html":"<h3>1. 构造函数继承</h3>\n<p>call,apply 可以用来更改函数的作用环境，因此在下面的栗子当中：<br>\n<code class=\"language-text\">SuperClass.call(this,id);</code>就是将子类（SubClass）的变量在父类当中执行一遍，由于父类是给this绑定属性的，因此子类自然也就继承了父类的共有属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">//声明父类\nfunction SuperClass(id) {\n    // 引用类型共有属性\n    this.books = [&#39;javascript&#39;,&#39;html&#39;,&#39;css&#39;];\n    // 值类型共有属性\n    this.id = id;\n}\n//父类声明原型方法\nSuperClass.prototype.showBooks = function() {\n    console.log(this.books);\n}\n//声明子类\nfunction SubClass(id) {\n    //继承父类\n    SuperClass.call(this,id);\n}\n\nvar instance1 = new SubClass(1);\nvar instance2 = new SubClass(2);\n\ninstance1.books.push(&#39;html5&#39;);\ninstance2.books.push(&#39;css3&#39;);\n\nconsole.log(instance1.books);  // [ &#39;javascript&#39;, &#39;html&#39;, &#39;css&#39;, &#39;html5&#39; ]\nconsole.log(instance1.id);     // 1\n\nconsole.log(instance2.books);  // [ &#39;javascript&#39;, &#39;html&#39;, &#39;css&#39;, &#39;css3&#39; ]\nconsole.log(instance2.id);     // 2\n\nconsole.log(instance1.showBooks());  // TypeError: instance1.showBooks is not a function</code></pre>\n      </div>\n<p>由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承。</p>\n<h3>2. 组合继承</h3>\n<p>构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现，但没有继承prototype，可将构造函数和prototype结合起来。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">//声明父类\nfunction SuperClass(name){\n    this.name = name;\n    this.books = [&quot;html&quot;,&quot;js&quot;,&quot;css&quot;];\n}\n\nSuperClass.prototype.getName = function() {\n    console.log(this.name);\n}\n\n//声明子类\nfunction SubClass(name, time) {\n    SuperClass.call(this, name);\n    this.time = time;\n}\n\n// 子类原型继承父类\nSubClass.prototype = new SuperClass();\n//子类原型方法\nSubClass.prototype.getTime = function(){\n    console.log(this.time);\n}\n\nvar instance1 = new SubClass(&#39;js book&#39;,2014);</code></pre>\n      </div>\n<p><img src=\"/images/oriented/js-oriented-2016-06-06.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">instance1.books.push(&#39;html5&#39;,&#39;css3&#39;);</code></pre>\n      </div>\n<p><code class=\"language-text\">instance1这个实例和instance1.__proto__都各有一个books，这是因为构造函数被调用了两次的缘故。</code>\n<img src=\"/images/oriented/js-oriented-2-2016-06-06.png\">\n优点： 子类实例中更改父类继承下来的引用类型如books，不会影响到其他实例，并且子类实例化过程中又能将参数传递到父类的构造函数中<br>\n缺点： 使用构造函数继承时执行了一遍父类的构造函数，实现子类原型继承时又执行了一次构造函数</p>\n<h3>3. 原型式继承</h3>\n<p>父类SuperClass不变的属性都可以写入SuperClass.prototype当中，所以可以让SubClass.prototype直接跳过new SuperClass()，直接继承SuperClass.prototype。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">// 子类原型继承父类\nSubClass.prototype = SuperClass.prototype;\n\nconsole.log(instance1.getName()); //js book</code></pre>\n      </div>\n<p>优点：效率比较高（不用执行和建立SuperClass的实例了），比较省内存。<br>\n缺点：SubClass.prototype和SuperClass.prototype现在指向了同一个对象，那么任何对SubClass.prototype的修改，都会反映到SuperClasss.prototype。\n<strong>借助原型prototype可以根据已有的对象创建一个新的对象</strong>，同时不必创建新的自定义类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">function inheritObject(o){\n    //声明一个过渡函数对象\n    function F(){};\n    //过渡对象的原型继承父对象\n    F.prototype = o;\n    //返回过度对象的一个实例，该实例的原型继承了父对象\n    return new F();\n}\n\nvar book = {\n    name: &quot;js book&quot;,\n    alikeBook: [&quot;css book&quot;,&quot;html Book&quot;]\n}\n\nvar newBook = inheritObject(book);</code></pre>\n      </div>\n<p>这种方式由于F过度类的构造函数中无内容，所以开销比较小。</p>\n<h3>4. 寄生组合式继承</h3>\n<p>创建一个父类原型的副本而不需要调用父类的构造函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">/**\n＊ 寄生式继承 继承原型\n＊ 传递参数 subClass 子类\n＊ 传递参数 superClass 父类\n**/\nfunction inheritPrototype(subClass, superClass) {\n    // 复制一份父类的原型副本保存在变量中\n    var p = inheritObject(superClass.prototype);\n    // 修正因为重写子类原型导致子类的constructor属性被修改\n    p.constructor = subClass;\n    //设置子类的原型\n    subClass.prototype = p;\n}\n\n// 定义子类\nfunction SuperClass(name) {\n    this.name = name;\n    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];\n}\n// 定义父类原型方法\nSuperClass.prototype.getName = function() {\n    console.log(this.name);\n}\n// 定义子类\nfunction SubClass(name, time) {\n    // 构造函数式继承\n    SuperClass.call(this, name);\n    // 子类新增属性\n    this.time = time;\n}\n// 寄生式继承父类原型\ninheritPrototype(SubClass, SuperClass);\n// 子类新增原型方法\nSubClass.prototype.getTime = function() {\n    console.log(this.time);\n}\n\nvar instance1 = new SubClass(&quot;js book&quot;, 2014);\nvar instance2 = new SubClass(&quot;css book&quot;, 2013);</code></pre>\n      </div>","frontmatter":{"title":"javascript 面向对象编程（继承）","date":"June 06, 2016"}}},"pageContext":{"slug":"/object-oriented-javascript-2/","previous":{"fields":{"slug":"/hanoi-problem/"},"frontmatter":{"title":"汉诺塔问题"}},"next":{"fields":{"slug":"/moving-to-webpack2/"},"frontmatter":{"title":"迁移至webpack2"}}}}